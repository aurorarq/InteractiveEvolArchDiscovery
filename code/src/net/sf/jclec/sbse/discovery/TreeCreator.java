package net.sf.jclec.sbse.discovery;

import net.sf.jclec.ISpecies;
import net.sf.jclec.base.AbstractCreator;
//import net.sf.jclec.fitness.SimpleValueFitness;
import net.sf.jclec.syntaxtree.SyntaxTree;

/**
 * Tree creator for the discovery problem.
 * It creates the component-based architectural model
 * 
 * <p>HISTORY:
 * <ul>
 * 	<li>1.0: Creation (January 2013)
 * 	<li>2.0: Refactoring (July 2013)
 * </ul>
 * 
 * @author Aurora Ramirez
 * @author Jose Raul Romero
 * @author Sebastian Ventura
 * @version 2.0
 * */
public class TreeCreator extends AbstractCreator {

	//////////////////////////////////////////////////////////////////
	//----------------------------------------------------- Properties
	//////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	private static final long serialVersionUID = 6073204230840356653L;

	/** Individual species */
	protected transient Species species;

	/** Individuals schema */
	protected transient Schema schema;
	
	/////////////////////////////////////////////////////////////////
	//------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor.
	 * */
	public TreeCreator(){
		super();
	}

	//////////////////////////////////////////////////////////////////
	//----------------------------------------------- Override methods
	//////////////////////////////////////////////////////////////////
	
	@Override
	public boolean equals(Object oOther){
		if (oOther instanceof TreeCreator) {
			return true;			
		}
		else {
			return false;
		}
	}
	
	@Override
	protected void prepareCreation() {
		ISpecies species = this.context.getSpecies();
		if (species instanceof Species) {
			// Type conversion 
			this.species = (Species) species;
			// Sets genotype schema
			this.schema = ((Species) species).getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Invalid species in context");
		}
	}

	@Override
	protected void createNext() {
		SyntaxTree genotype = new SyntaxTree();
		// Generate the random number of components
		int numberOfComponents = this.randgen.choose(this.schema.getMinNumOfComp(), this.schema.getMaxNumOfComp()+1);
		genotype = this.schema.createSyntaxTree(numberOfComponents, this.randgen);
		this.createdBuffer.add(this.species.createIndividual(genotype));
	}
}